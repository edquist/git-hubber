#!/usr/bin/python

import os
import re
import sys
import json
#import urllib  # for: data = urllib.urlencode(values)
import getopt
import getpass
import urllib2
import operator
import subprocess

def usage(msg=None):
    if msg:
        print >>sys.stderr, msg + "\n"

    s = os.path.basename(__file__)
    print """\
usage: [PASS=...] %s [-u USER[:PASS]] [-d passfd] COMMAND [args...]

COMMANDs:

  (*)   list-mine
        list-user        USER
        list-org         ORG
  (*)   create-mine      REPO
  (*)   create-org       ORG   REPO
  (*)   delete           OWNER REPO
  (*)   rename           OWNER REPO NEWNAME
  (*)   set-description  OWNER REPO DESCRIPTION
  (*)   protect-branch   OWNER REPO BRANCH
  (*)   unprotect-branch OWNER REPO BRANCH
        
(*) USER login required
""" % s
    sys.exit()

apiurl = 'https://api.github.com'

GET    = 'GET'
POST   = 'POST'
PATCH  = 'PATCH'
DELETE = 'DELETE'

_authstr = None

def authsetup(user, passwd):
    import base64
    global _authstr
    _authstr = base64.encodestring('%s:%s' % (user,passwd)).replace('\n', '')

def authsetup_doesntwork(user, passwd):
    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
    password_mgr.add_password(None, apiurl, user, passwd)
    handler = urllib2.HTTPBasicAuthHandler(password_mgr)
    opener = urllib2.build_opener(handler)
    urllib2.install_opener(opener)

def getpw(user, passfd=None):
    if ':' in user:
        user, pw = user.split(':', 1)
    elif passfd is not None:
        pw = os.fdopen(passfd).readline().rstrip('\n')
    elif 'PASS' in os.environ:
        pw = os.environ['PASS']
    else:
        pw = getpass.getpass('passwd for user %s: ' % user)
    return user, pw

def linkparse(linktext):
    mm = re.findall(r'<([^>]+)>; rel="([^"]+)"', linktext)
    return dict((page, rel) for rel,page in mm)

def get_nextlink(resp):
    linktext = resp.headers.getheader('link')
    if linktext:
        links = linkparse(linktext)
        if 'next' in links:
            return links['next']

def _snarfer(method, url, data=None):
    req = urllib2.Request(url, data)
    if _authstr:
        req.add_header("Authorization", "Basic %s" % _authstr)
    req.get_method = lambda : method
    resp = urllib2.urlopen(req)
    nextlink = get_nextlink(resp)
    return resp.read(), nextlink

def snarfergen(method, url, data=None):
    while url:
        text, url = _snarfer(method, url, data)
        if text:
            yield json.loads(text)
    
def snarfer(method, path, data=None):
    if data:
        data = json.dumps(data)
    url = apiurl + path
    outs = list(snarfergen(method, url, data))
    nresp = len(outs)
    if nresp == 0:
        return None
    elif nresp == 1:
        return outs[0]
    elif type(outs[0]) is list:
        return reduce(operator.add, snarfergen(method, url, data))
    else:
        return outs

"""
github API notes:

: list-mine      GET /user/repos
: list-user      GET /users/:username/repos
: list-org       GET /orgs/:org/repos
: create-mine    POST /user/repos      {"name": "Repo-Name"}
: create-org     POST /orgs/:org/repos {"name": "Repo-Name"}
: delete         DELETE /repos/:owner/:repo
: rename (edit)  PATCH /repos/:owner/:repo  {"name": "New-Repo-Name"}
: protect-branch PATCH /repos/:owner/:repo/branches/:branch {"enabled": "true"}
"""

def print_names(j):
    m = max( len(x['name']) for x in j )
    for x in j:
        print "%-*s  %s" % (m, x['name'], x['html_url'])

def pmsg(j):
    if j and 'message' in j:
        print j['message']

def list_mine():
    j = snarfer(GET, '/user/repos')
    pmsg(j)
    for x in j:
        #print x['full_name']
        print x['html_url']

def list_user(luser):
    j = snarfer(GET, '/users/%s/repos' % luser)
    pmsg(j)
    for x in j:
        #print x['name']
        print x['html_url']

def list_org(org):
    j = snarfer(GET, '/orgs/%s/repos' % org)
    pmsg(j)
    for x in j:
        #print x['name']
        print x['html_url']

def create_mine(repo):
    j = snarfer(POST, '/user/repos', {"name": repo})
    pmsg(j)

def create_org(org, repo):
    j = snarfer(POST, '/orgs/%s/repos' % org, {"name": repo})
    pmsg(j)

def delete_repo(owner, repo):
    j = snarfer(DELETE, '/repos/%s/%s' % (owner,repo))
    pmsg(j)

def rename_repo(owner, repo, newname):
    j = snarfer(PATCH, '/repos/%s/%s' % (owner,repo), {"name": newname})
    pmsg(j)

def set_description(owner, repo, desc):
    j = snarfer(PATCH, '/repos/%s/%s' % (owner,repo),
               {"name": repo, "description": desc})
    pmsg(j)

def protect_branch(owner, repo, branch):
    j = snarfer(PATCH, '/repos/%s/%s/branches/%s' % (owner,repo,branch),
               {"enabled": True})
    pmsg(j)

def unprotect_branch(owner, repo, branch):
    j = snarfer(PATCH, '/repos/%s/%s/branches/%s' % (owner,repo,branch),
               {"enabled": False})
    pmsg(j)

methods = {
    'list-mine':        [list_mine,        0, True],
    'list-user':        [list_user,        1, False],
    'list-org':         [list_org,         1, False],
    'create-mine':      [create_mine,      1, True],
    'create-org':       [create_org,       2, True],
    'delete':           [delete_repo,      2, True],
    'rename':           [rename_repo,      3, True],
    'set-description':  [set_description,  3, True],
    'protect-branch':   [protect_branch,   3, True],
    'unprotect-branch': [unprotect_branch, 3, True]
}

def main(args):
    ops, args = getopt.getopt(args, 'u:d:')
    ops = dict(ops)
    if len(args) < 1:
        usage()

    user   = None
    passfd = None

    if '-u' in ops: user   =     ops['-u']
    if '-d' in ops: passfd = int(ops['-d'])

    command = args[0]
    args = args[1:]

    if command not in methods:
        usage("unrecognized command: '%s'" % command)

    method, ex_args, user_required = methods[command]

    if len(args) != ex_args:
        usage("wrong number of args for %s command" % command)

    if user:
        user, passwd = getpw(user, passfd)
        authsetup(user, passwd)
    elif user_required:
        usage("USER required for %s command" % command)

    method(*args)

if __name__ == '__main__':
    main(sys.argv[1:])

